import os
import sys
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import numpy as np
import re

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í
# =============================================================================

def plot_experience_distribution(df, save_dir):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã"""
    plt.figure()
    exp_counts = df['experience'].value_counts()
    exp_counts.plot(kind='bar', color='skyblue')
    plt.title('–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    plt.xlabel('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'experience_distribution.png'))
    plt.close()

def plot_top_skills(df, save_dir, top_n=15):
    """–¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_skills = [skill for sublist in df['skills'].dropna() for skill in sublist]
    
    # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞–≤—ã–∫–æ–≤
    if not all_skills:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    skills_series = pd.Series(all_skills)
    top_skills = skills_series.value_counts().head(top_n)
    
    plt.figure()
    top_skills.sort_values().plot(kind='barh', color='lightgreen')
    plt.title(f'–¢–æ–ø {top_n} –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è Data Scientist')
    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    plt.ylabel('–ù–∞–≤—ã–∫')
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'top_skills.png'))
    plt.close()

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text or not isinstance(text, str):
        return ""
    text = re.sub(r'<[^>]+>', '', text)  # –£–¥–∞–ª–µ–Ω–∏–µ HTML
    text = re.sub(r'[^\w\s]', '', text)   # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    return text.lower().strip()

def generate_requirements_wordcloud(df, save_dir):
    """–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π"""
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    texts = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if 'requirements' in df:
        texts.extend(
            clean_text(req) for req in df['requirements'].fillna('').astype(str) 
            if clean_text(req) != ''
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
    if 'responsibility' in df:
        texts.extend(
            clean_text(resp) for resp in df['responsibility'].fillna('').astype(str)
            if clean_text(resp) != ''
        )
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    full_text = ' '.join(texts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
    if not full_text.strip():
        print("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–∞–∫–æ —Å–ª–æ–≤
    try:
        wordcloud = WordCloud(
            width=1200, 
            height=800,
            background_color='white',
            colormap='viridis',
            max_words=100,
            collocations=False
        ).generate(full_text)
        
        plt.figure(figsize=(15, 10))
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title('–ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π', fontsize=18)
        plt.tight_layout()
        plt.savefig(os.path.join(save_dir, 'combined_wordcloud.png'))
        plt.close()
        print("‚úÖ –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤: {e}")

def plot_salary_distribution(df, save_dir):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    salary_df = df.dropna(subset=['salary_from', 'salary_to'])
    
    if salary_df.empty:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    plt.figure()
    
    # –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    salary_df = salary_df.copy()
    salary_df['avg_salary'] = (salary_df['salary_from'] + salary_df['salary_to']) / 2
    
    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã - –≤–µ—Ä—Ö–Ω–∏–µ 5%
    threshold = salary_df['avg_salary'].quantile(0.95)
    filtered_salaries = salary_df[salary_df['avg_salary'] <= threshold]
    
    sns.histplot(filtered_salaries['avg_salary'], bins=30, kde=True, color='salmon')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)')
    plt.xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π')
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'salary_distribution.png'))
    plt.close()

def plot_salary_by_experience(df, save_dir):
    """–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    salary_df = df.dropna(subset=['salary_from', 'salary_to'])
    
    if salary_df.empty:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É
    salary_df = salary_df.copy()
    salary_df['avg_salary'] = (salary_df['salary_from'] + salary_df['salary_to']) / 2
    
    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã
    threshold = salary_df['avg_salary'].quantile(0.95)
    filtered_salaries = salary_df[salary_df['avg_salary'] <= threshold]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã
    plt.figure()
    sns.boxplot(
        x='experience', 
        y='avg_salary', 
        data=filtered_salaries,
        palette='pastel',
        showfliers=False
    )
    plt.title('–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã')
    plt.xlabel('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    plt.ylabel('–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'salary_by_experience.png'))
    plt.close()

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–î–£–õ–Ø
# =============================================================================

def setup_visuals():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        figures_dir = os.path.join(PROJECT_ROOT, "results", "figures")
        os.makedirs(figures_dir, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {figures_dir}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        processed_dir = os.path.join(PROJECT_ROOT, "data", "processed")
        os.makedirs(processed_dir, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {processed_dir}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
        return False

def analyze_and_visualize(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        processed_dir = os.path.join(PROJECT_ROOT, "data", "processed")
        csv_path = os.path.join(processed_dir, "processed_vacancies.csv")
        df.to_csv(csv_path, index=False)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_path}")
        
        # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        sns.set_style("whitegrid")
        plt.rcParams.update({
            'figure.figsize': (12, 6),
            'font.size': 14,
            'axes.titlesize': 16,
            'axes.titleweight': 'bold'
        })
        
        # 3. –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        figures_dir = os.path.join(PROJECT_ROOT, "results", "figures")
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
        plot_experience_distribution(df, figures_dir)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
        plot_top_skills(df, figures_dir)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π
        generate_requirements_wordcloud(df, figures_dir)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç
        plot_salary_distribution(df, figures_dir)
        
        # –ì—Ä–∞—Ñ–∏–∫ 5: –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã
        plot_salary_by_experience(df, figures_dir)
        
        print(f"üìä –í—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {figures_dir}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False